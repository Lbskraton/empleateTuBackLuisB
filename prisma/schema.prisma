// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  name String 
  surname String?
  email String @unique
  password  String 
  role String?  //admin vip null
  course String?
  active  Boolean @default(true)
  accepNotifications Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //actualiza automatico


  //FK
  offers Offer[]
  Rate Rate[]
}

model Offer{
  id  Int @id @default(autoincrement())
  title String
  description String?
  active  Boolean @default(true)
  contactEmail String?
  location String?
  published DateTime @default(now()) //iso 8601, no se como compruebas
  expired DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //actualiza automatico


  //FK
  idCategory Int?
  category Category? @relation(fields:[idCategory],references: [id])

  idUserCreator Int
  userCreator User @relation(fields:[idUserCreator],references: [id])


  Rate Rate[]
}


model Category{
  id  Int @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //actualiza automatico

  //FK
  offers Offer[]

}

model Rate{
  idUser Int
  idOffer Int
  value Int


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //actualiza automatico
  
  @@id([idUser,idOffer])
  
  //FK
  user User @relation(fields: [idUser],references: [id])
  offer Offer @relation(fields: [idOffer],references: [id])


}